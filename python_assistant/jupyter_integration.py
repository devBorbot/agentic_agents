from IPython.core.magic import register_line_cell_magic  # Import the decorator for creating custom Jupyter magic commands.
from coding_agent import coding_agent  # Import the CodeAgent instance for executing coding tasks.

def init_jupyter():
    """
    Initializes custom Jupyter magic commands for integrating the CodeAgent.
    
    This function registers a magic command named `agent` that allows users to interact
    with the CodeAgent directly from Jupyter notebooks. The `agent` magic can be used
    as either a line magic or a cell magic.
    """
    
    @register_line_cell_magic
    def agent(line, cell=None):
        """
        Magic command for CodeAgent integration in Jupyter notebooks.
        
        Args:
            line (str): The input provided in the magic command (for line magic).
            cell (str, optional): The content of the cell when using cell magic.
        
        Returns:
            str: The output generated by the CodeAgent after processing the input.
        
        Usage:
            - Line Magic: `%agent <input>` will pass `<input>` to the CodeAgent.
            - Cell Magic: `%%agent <input>` followed by code in the cell will pass
              `<input>` and the cell content to the CodeAgent.
        """
        if cell is None:  # Line magic handling
            return coding_agent.run(line)  # Execute the CodeAgent with the input from the line.
        else:  # Cell magic handling
            return coding_agent.run(f"{line}: {cell}")  # Execute the CodeAgent with both line and cell content.

    print("Jupyter magic commands registered!")  # Notify that magic commands have been successfully registered.

